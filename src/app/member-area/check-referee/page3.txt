"use client";

import { chain } from "@/app/chain";
import { client } from "@/app/client";
import Link from "next/link";
import { useEffect, useState } from "react";
import { getContractMetadata } from "thirdweb/extensions/common";
import { ConnectButton, useActiveAccount, useReadContract } from "thirdweb/react";
import { inAppWallet } from "thirdweb/wallets";
import { contract } from "../../../../utils/contracts";
import { claimTo as claimERC1155, balanceOf as balanceOfERC1155 } from "thirdweb/extensions/erc1155";
import { claimTo as claimERC20, balanceOf as balanceOfERC20 } from "thirdweb/extensions/erc20";
import { defineChain, getContract, toEther } from "thirdweb";
import { polygon } from "thirdweb/chains";


interface RefereeData {
  refereeId: string;
  referrerId: string;
}

interface ReferrerData {
  referrerId: string;
  name?: string;
  email?: string;
  tokenId?: string;
}

export default function RefereePage() {
  const [referees, setReferees] = useState<RefereeData[] | null>(null);
  const [referrers, setReferrers] = useState<ReferrerData[] | null>(null);
  const [loading, setLoading] = useState(true);
  const [referrerId, setReferrerId] = useState("");

//   const refereesUrl = "https://raw.githubusercontent.com/eastern-cyber/dproject-11/main/public/referees.json";
//   const referrersUrl = "https://raw.githubusercontent.com/eastern-cyber/dproject-11/main/public/referrers.json";

    // Use relative paths to refer to files in the /public folder
    const refereesUrl = "/referees.json";
    const referrersUrl = "/referrers.json";

  useEffect(() => {
    Promise.all([
      fetch(refereesUrl).then((res) => res.json()),
      fetch(referrersUrl).then((res) => res.json())
    ])
      .then(([refereesData, referrersData]) => {
        // Ensure that referrerId exists and is not empty
        const validReferrers = referrersData.filter((item: ReferrerData) => item.referrerId && item.referrerId.trim() !== "");
        setReferees(refereesData);
        setReferrers(validReferrers);
        setLoading(false);
      })
      .catch((err) => {
        console.error("Error loading JSON:", err);
        setLoading(false);
      });
  }, []);

  if (loading) {
    return <div className="p-6">Loading...</div>;
  }

  if (!referees || !referrers) {
    return <div className="p-6 text-red-600">Failed to load data.</div>;
  }

  // Step 1: Find all refereeIds for the entered referrerId
  const matchingReferees = referees.filter((item) => item.referrerId === referrerId);
  const matchingRefereeIds = matchingReferees.map(item => item.refereeId);

  // Step 2: Find all referrer records where referrerId matches refereeId
  const matchingReferrerRecords = referrers.filter((item) => matchingRefereeIds.includes(item.referrerId));

  const account = useActiveAccount();
  
  const { data: nftMetadata } = useReadContract(
      getContractMetadata,
      {
        contract: contract,
      }
    );

  return (
    <main className="p-4 pb-10 flex flex-col items-center">
        <div className="p-6 bg-gray-900 text-white">
            <div className="flex justify-center mb-10">
                <ConnectButton locale={"en_US"} 
                    client={client}
                    chain={chain}
                    wallets={[ inAppWallet ({
                    auth: {
                        options: [
                            "email",
                        ]
                        }
                    }) ]}
                    connectButton={{ label: "ล็อกอิน" }}
                    connectModal={{
                        title: "เชื่อมต่อกระเป๋า",
                        titleIcon: "https://dfi.fund/_next/static/media/DFastLogo_650x600.4f2ec315.svg",
                        size: "wide", // Change to "compact" or "auto" 
                    }}
                    supportedTokens={{
                    [chain.id]: [
                        {
                            address: "0xca23b56486035e14F344d6eb591DC27274AF3F47",
                            name: "DProject",
                            symbol: "DFI",
                            icon: "https://dfi.fund/_next/static/media/DFastLogo_650x600.4f2ec315.svg",
                        },
                        {
                            address: "0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359",
                            name: "USDC",
                            symbol: "USDC",
                            icon: "https://polygonscan.com/token/images/centre-usdc_32.png",
                        },
                        {
                            address: "0xc2132D05D31c914a87C6611C10748AEb04B58e8F",
                            name: "USDT",
                            symbol: "USDT",
                            icon: "https://polygonscan.com/token/images/tether_32.png",
                            },
                    ],
                    }}
                    supportedNFTs={{
                    [chain.id]: [
                        "0x2a61627c3457cCEA35482cAdEC698C7360fFB9F2", // nft contract address
                    ],
                    }}
                />
            </div>
            <div className="flex flex-col justify-center items-center">
                <WalletBalances walletAddress={account?.address || ""}/>
            </div>
        <h1 className="text-center text-[18px] font-bold">ตรวจสอบรายชื่อผู้ที่ท่านแนะนำ</h1>
        <h2 className="text-center text-[17px]">ใส่เลขกระเป๋าของท่าน</h2>
        <input
            type="text"
            placeholder="Enter Referrer ID"
            value={referrerId}
            onChange={(e) => setReferrerId(e.target.value)}
            className="border border-gray-400 p-2 rounded mt-4 w-full bg-gray-800 text-white"
        />

        <h2 className="text-center text-[18px] font-semibold mt-4">รายการผู้ที่ท่านแนะนำ</h2>
        {matchingReferrerRecords.length > 0 ? (
            <table className="table-auto border-collapse border border-gray-500 mt-4 w-full">
            <thead>
                <tr>
                <th className="border border-gray-400 px-4 py-2">ผู้ที่ท่านแนะนำ</th>
                <th className="border border-gray-400 px-4 py-2">ชื่อ</th>
                <th className="border border-gray-400 px-4 py-2">อีเมล</th>
                <th className="border border-gray-400 px-4 py-2">Token ID</th>
                </tr>
            </thead>
            <tbody>
                {matchingReferrerRecords.map((item: ReferrerData) => (
                <tr key={item.referrerId}>
                    <td className="border border-gray-400 px-4 py-2">{item.referrerId.slice(0, 6)}...{item.referrerId.slice(-4)}</td>
                    <td className="border border-gray-400 px-4 py-2">{item.name || "N/A"}</td>
                    <td className="border border-gray-400 px-4 py-2">{item.email || "N/A"}</td>
                    <td className="border border-gray-400 px-4 py-2">{item.tokenId || "N/A"}</td>
                </tr>
                ))}
            </tbody>
            </table>
        ) : (
            <p className="mt-2 text-gray-400">No referees found for this referrer ID.</p>
        )}
            <div className="flex flex-col mt-8 justify-center items-center w-full">
                <Link 
                    className="flex flex-col border border-zinc-500 px-4 py-3 rounded-lg hover:bg-red-600 transition-colors hover:border-zinc-800"
                    href="/member-area">
                    <p className="text-center text-[19px]">กลับสู่พื้นที่สมาชิก</p>
                </Link>
            </div>
        </div>
    </main>
  );
}

type walletAddresssProps = {
  walletAddress?: string;
};

const WalletBalances: React.FC<walletAddresssProps> = ({ walletAddress }) => {
  const { data: nftBalance } = useReadContract(
      balanceOfERC1155,
      {
          contract: getContract({
              client: client,
              chain: defineChain(polygon),
              address: "0x2a61627c3457cCEA35482cAdEC698C7360fFB9F2"
          }),
          owner: walletAddress || "",
          tokenId: 0n
      }
  );
  const { data: dfastBalance } = useReadContract(
      balanceOfERC20,
      {
          contract: getContract({
              client: client,
              chain: defineChain(polygon),
              address: "0xca23b56486035e14F344d6eb591DC27274AF3F47"
          }),
          address: walletAddress || ""
      }
  );
  const { data: polBalance } = useReadContract(
      balanceOfERC20,
      {
          contract: getContract({
              client: client,
              chain: defineChain(polygon),
              address: "0x0000000000000000000000000000000000001010"
          }),
          address: walletAddress || ""
      }
  );
  const { data: usdcBalance } = useReadContract(
      balanceOfERC20,
      {
          contract: getContract({
              client: client,
              chain: defineChain(polygon),
              address: "0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359"
          }),
          address: walletAddress || ""
      }
  );
  const { data: usdtBalance } = useReadContract(
      balanceOfERC20,
      {
          contract: getContract({
              client: client,
              chain: defineChain(polygon),
              address: "0xc2132D05D31c914a87C6611C10748AEb04B58e8F"
          }),
          address: walletAddress || ""
      }
  );

  return (
      <div style={{
          display: "flex",
          flexDirection: "column",
          width: "100%",
          alignItems: "center",
          justifyContent: "center",
          padding: "20px",
          // border: "1px solid #333",
          // borderRadius: "8px",
        }}>
          <div 
          style={{
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
              width: "100%",
              fontSize: "24px",
              justifyContent: "center",
              paddingBottom: "20px",
            }}
          >
              <p style={{fontSize: "24px"}}><b>รายการทรัพย์สิน</b></p>
              <p style={{fontSize: "19px"}}><b>เลขที่กระเป๋า</b></p>
              <div style={{border: "1px solid #444", background: "#222", padding: "0px 6px", margin: "6px"}}>
              <p className="text-[18px] break-all">{walletAddress ? walletAddress || "" : "ยังไม่ได้เชื่อมกระเป๋า !"} </p>    
              </div>
          </div>
          
          <div className="mt-8 flex flex-col justify-items-left">              
              <div className="flex mt-3 gap-2 md:gap-2">
                  <img className="h-6 w-6 rounded-full mr-1" src="https://polygonscan.com/token/images/centre-usdc_32.png" />
                  เหรียญ USDC: {walletAddress ? (Number(usdcBalance) / 1_000_000).toFixed(2) : "0"}
              </div>                
              <div className="flex mt-3 gap-2 md:gap-2">
                  <img className="h-6 w-6 rounded-full mr-1" src="https://polygonscan.com/token/images/tether_32.png" />
                  เหรียญ USDT: {walletAddress ? (Number(usdtBalance) / 1_000_000).toFixed(2) : "0"}
              </div>                
              <div className="flex mt-3 gap-2 md:gap-2">
                  <img className="h-6 w-6 rounded-full mr-1" src="https://polygonscan.com/token/images/polygonmatic_new_32.png" />
                  เหรียญ POL: {walletAddress? 
                  new Intl.NumberFormat("en-US",{minimumFractionDigits: 2,maximumFractionDigits: 6,})
                  .format(Number(toEther(polBalance || 0n))): "0"}
                  {/* {walletAddress ? (Number(toEther(polBalance || 0n))).toFixed(2) : "0"} */}
              </div>

              <div className="mt-6 flex justify-items-center gap-1 md:gap-6">
                      <Link target="_blank" href="https://opensea.io/account/collected">
                          {/* <NFTMetadata /> */}
                          <img className="flex h-8 w-8 mr-3" src="/KokKokKok_Logo_WhiteBG_686x686.png" alt="" />
                      </Link>
                      <Link target="_blank" href="https://opensea.io/account/collected">
                          <p style={{alignItems: "center", justifyContent: "center", fontSize: "18px"}}>
                              NFT ทั้งหมดที่ท่านถือครอง
                          </p >
                      </Link>
              </div>   
          </div>
        </div>
    )
};